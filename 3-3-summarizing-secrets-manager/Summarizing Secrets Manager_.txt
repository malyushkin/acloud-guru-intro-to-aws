Hello, Cloud Gurus, and welcome to Summarizing Secrets Manager.
I'll start with a little bit of background. Historically,
when you created an application,
or a website that had to get data from a database,
you had to hard code or write the literal password required to get to
that database in your programming code. And it looked something like this.
You can see at the bottom there we have password equals and then the actual
password in there. Not only is this dangerous,
because anyone who opens the code can see the passwords.
When you update or rotate the passwords,
you have to go through and update all of the passwords in all of the code that
references it throughout your application.
Then it's possible that you have multiple applications using your database.
So you have to go and update all the old ones too,
and it becomes a big mess and wastes a whole bunch of time and working hours to
get it all done properly.
So this is the issue that AWS Secrets Manager solves.
AWS Secrets Manager is a simple service that helps you protect the secrets that
are needed to access your applications, services, and resources.
It can automatically rotate them too, which I'll get to in a moment.
The secrets can be passwords, keys,
and tokens that you may use to access things like the mentioned database in my
story, but AWS secrets manager goes a step further than just
password storage. Firstly,
you can replace the password in your programming code with a request to
secrets manager for your password,
which is then sent to the service that requires it. And with this,
it means you no longer have to store passwords in your code.
Your code simply becomes a request to secrets manager for your password,
which is then passed on.
And not only that secrets manager can also change your passwords for you at
regular intervals. So not only do you not have to keep passwords in your code,
which saves you time,
the passwords themselves are automatically changed by the service,
both where they're stored and on the surface where it's being used.
Completely automatically, which improves security.
The two amazing features here,
saving time and making your applications more secure,
is a prime example of why AWS spends the time to provide these services
for organizations. Okay,
that's all I want to tell you about AWS Secrets Manager. Thank you for watching.
If you have any questions, please let me know.
Otherwise feel free to move on to the next lesson.